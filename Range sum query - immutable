//利用map实现缓存，容易超时
//时间复杂度：每次查询的时间 O(1)，O(n^2) 时间用来预计算。在构造函数中完成的预计算需要 O(n^2)时间。每个 sumrange 查询的时间复杂性是 O(1)因为哈希表的查找操作是常量时间。
//空间复杂度：O(n^2)，所需的额外空间为 O(n^2) 因为 i 和 j 都有 n 个候选空间。


class numArray{
  private Map<Pair<Integer, Integer>, Integer> map = new HashMap<>();//简单的键值对类Pair，用于返回两个值都有意义的键值对，仅用于保存一对键值对
  
  //Apache Commons库中Pair抽象类，ImmutablePair不可变的子类，MutablePair可变子类，有Pair.getLeft(), Pair.getRight()函数
  //javax.util包中Pair类，有Pair.getKey(), Pair.getValue()函数

  public NumArray(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
        int sum = 0;
        for (int j = i; j < nums.length; j++) {
            sum += nums[j];
            map.put(new Pair(i,j), sum);//创建一个Pair对象
        }
    }
  }

  public int sumRange(int i, int j) {
    return map.get(new Pair(i,j));
  }
}

//********************************************************
//sum[k]表示nums[0] - nums[k-1]之和
//注意，在上面的代码中，我们插入了一个虚拟 0 作为 sum 数组中的第一个元素。这个技巧可以避免在 sumrange 函数中进行额外的条件检查。
//复杂度分析:
//时间复杂度：每次查询的时间 O(1)，O(N) 预计算时间。由于累积和被缓存，每个sumrange查询都可以用 O(1) 时间计算。
//空间复杂度：O(n)


class numArray{
  private int[] sum;

  public NumArray(int[] nums) {
    sum = new int[nums.length + 1];
    for (int i = 0; i < nums.length; i++) {
        sum[i + 1] = sum[i] + nums[i];//前面 0 - (i-1) 项之和加上第 i 项
    }
  }

  public int sumRange(int i, int j) {
      return sum[j + 1] - sum[i];//前 0 - (j) 项之和减去 0 - (i-1) 项之和
   }
}
